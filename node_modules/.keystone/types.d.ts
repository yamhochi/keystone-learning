type Scalars = {
  readonly ID: string;
  readonly Boolean: boolean;
  readonly String: string;
  readonly Int: number;
  readonly Float: number;
  readonly JSON: import("@keystone-6/core/types").JSONValue;
  readonly Decimal: import("@keystone-6/core/types").Decimal | string;
};

export type UserWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
  readonly email?: Scalars["String"] | null;
};

export type UserWhereInput = {
  readonly AND?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly OR?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly NOT?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly id?: IDFilter | null;
  readonly name?: StringFilter | null;
  readonly email?: StringFilter | null;
  readonly attendances?: AttendanceManyRelationFilter | null;
};

export type IDFilter = {
  readonly equals?: Scalars["ID"] | null;
  readonly in?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly notIn?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly lt?: Scalars["ID"] | null;
  readonly lte?: Scalars["ID"] | null;
  readonly gt?: Scalars["ID"] | null;
  readonly gte?: Scalars["ID"] | null;
  readonly not?: IDFilter | null;
};

export type StringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly mode?: QueryMode | null;
  readonly not?: NestedStringFilter | null;
};

export type QueryMode =
  | "default"
  | "insensitive";

export type NestedStringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type AttendanceManyRelationFilter = {
  readonly every?: AttendanceWhereInput | null;
  readonly some?: AttendanceWhereInput | null;
  readonly none?: AttendanceWhereInput | null;
};

export type UserOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly name?: OrderDirection | null;
  readonly email?: OrderDirection | null;
};

export type OrderDirection =
  | "asc"
  | "desc";

export type UserUpdateInput = {
  readonly name?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly attendances?: AttendanceRelateToManyForUpdateInput | null;
};

export type AttendanceRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<AttendanceWhereUniqueInput> | AttendanceWhereUniqueInput | null;
  readonly set?: ReadonlyArray<AttendanceWhereUniqueInput> | AttendanceWhereUniqueInput | null;
  readonly create?: ReadonlyArray<AttendanceCreateInput> | AttendanceCreateInput | null;
  readonly connect?: ReadonlyArray<AttendanceWhereUniqueInput> | AttendanceWhereUniqueInput | null;
};

export type UserUpdateArgs = {
  readonly where: UserWhereUniqueInput;
  readonly data: UserUpdateInput;
};

export type UserCreateInput = {
  readonly name?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly attendances?: AttendanceRelateToManyForCreateInput | null;
};

export type AttendanceRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<AttendanceCreateInput> | AttendanceCreateInput | null;
  readonly connect?: ReadonlyArray<AttendanceWhereUniqueInput> | AttendanceWhereUniqueInput | null;
};

export type SocialWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type SocialWhereInput = {
  readonly AND?: ReadonlyArray<SocialWhereInput> | SocialWhereInput | null;
  readonly OR?: ReadonlyArray<SocialWhereInput> | SocialWhereInput | null;
  readonly NOT?: ReadonlyArray<SocialWhereInput> | SocialWhereInput | null;
  readonly id?: IDFilter | null;
  readonly title?: StringFilter | null;
  readonly date?: DateTimeNullableFilter | null;
  readonly attendances?: AttendanceManyRelationFilter | null;
};

export type DateTimeNullableFilter = {
  readonly equals?: any | null;
  readonly in?: ReadonlyArray<any> | any | null;
  readonly notIn?: ReadonlyArray<any> | any | null;
  readonly lt?: any | null;
  readonly lte?: any | null;
  readonly gt?: any | null;
  readonly gte?: any | null;
  readonly not?: DateTimeNullableFilter | null;
};

export type SocialOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly title?: OrderDirection | null;
  readonly date?: OrderDirection | null;
};

export type SocialUpdateInput = {
  readonly title?: Scalars["String"] | null;
  readonly date?: any | null;
  readonly attendances?: AttendanceRelateToManyForUpdateInput | null;
};

export type SocialUpdateArgs = {
  readonly where: SocialWhereUniqueInput;
  readonly data: SocialUpdateInput;
};

export type SocialCreateInput = {
  readonly title?: Scalars["String"] | null;
  readonly date?: any | null;
  readonly attendances?: AttendanceRelateToManyForCreateInput | null;
};

export type AttendanceWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type AttendanceWhereInput = {
  readonly AND?: ReadonlyArray<AttendanceWhereInput> | AttendanceWhereInput | null;
  readonly OR?: ReadonlyArray<AttendanceWhereInput> | AttendanceWhereInput | null;
  readonly NOT?: ReadonlyArray<AttendanceWhereInput> | AttendanceWhereInput | null;
  readonly id?: IDFilter | null;
  readonly session?: SocialWhereInput | null;
  readonly player?: UserWhereInput | null;
  readonly payment?: PaymentWhereInput | null;
};

export type AttendanceOrderByInput = {
  readonly id?: OrderDirection | null;
};

export type AttendanceUpdateInput = {
  readonly session?: SocialRelateToOneForUpdateInput | null;
  readonly player?: UserRelateToOneForUpdateInput | null;
  readonly payment?: PaymentRelateToOneForUpdateInput | null;
};

export type SocialRelateToOneForUpdateInput = {
  readonly create?: SocialCreateInput | null;
  readonly connect?: SocialWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type UserRelateToOneForUpdateInput = {
  readonly create?: UserCreateInput | null;
  readonly connect?: UserWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type PaymentRelateToOneForUpdateInput = {
  readonly create?: PaymentCreateInput | null;
  readonly connect?: PaymentWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type AttendanceUpdateArgs = {
  readonly where: AttendanceWhereUniqueInput;
  readonly data: AttendanceUpdateInput;
};

export type AttendanceCreateInput = {
  readonly session?: SocialRelateToOneForCreateInput | null;
  readonly player?: UserRelateToOneForCreateInput | null;
  readonly payment?: PaymentRelateToOneForCreateInput | null;
};

export type SocialRelateToOneForCreateInput = {
  readonly create?: SocialCreateInput | null;
  readonly connect?: SocialWhereUniqueInput | null;
};

export type UserRelateToOneForCreateInput = {
  readonly create?: UserCreateInput | null;
  readonly connect?: UserWhereUniqueInput | null;
};

export type PaymentRelateToOneForCreateInput = {
  readonly create?: PaymentCreateInput | null;
  readonly connect?: PaymentWhereUniqueInput | null;
};

export type PaymentWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type PaymentWhereInput = {
  readonly AND?: ReadonlyArray<PaymentWhereInput> | PaymentWhereInput | null;
  readonly OR?: ReadonlyArray<PaymentWhereInput> | PaymentWhereInput | null;
  readonly NOT?: ReadonlyArray<PaymentWhereInput> | PaymentWhereInput | null;
  readonly id?: IDFilter | null;
  readonly amount?: IntNullableFilter | null;
  readonly attendances?: AttendanceWhereInput | null;
};

export type IntNullableFilter = {
  readonly equals?: Scalars["Int"] | null;
  readonly in?: ReadonlyArray<Scalars["Int"]> | Scalars["Int"] | null;
  readonly notIn?: ReadonlyArray<Scalars["Int"]> | Scalars["Int"] | null;
  readonly lt?: Scalars["Int"] | null;
  readonly lte?: Scalars["Int"] | null;
  readonly gt?: Scalars["Int"] | null;
  readonly gte?: Scalars["Int"] | null;
  readonly not?: IntNullableFilter | null;
};

export type PaymentOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly amount?: OrderDirection | null;
};

export type PaymentUpdateInput = {
  readonly amount?: Scalars["Int"] | null;
  readonly attendances?: AttendanceRelateToOneForUpdateInput | null;
};

export type AttendanceRelateToOneForUpdateInput = {
  readonly create?: AttendanceCreateInput | null;
  readonly connect?: AttendanceWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type PaymentUpdateArgs = {
  readonly where: PaymentWhereUniqueInput;
  readonly data: PaymentUpdateInput;
};

export type PaymentCreateInput = {
  readonly amount?: Scalars["Int"] | null;
  readonly attendances?: AttendanceRelateToOneForCreateInput | null;
};

export type AttendanceRelateToOneForCreateInput = {
  readonly create?: AttendanceCreateInput | null;
  readonly connect?: AttendanceWhereUniqueInput | null;
};

export type KeystoneAdminUIFieldMetaCreateViewFieldMode =
  | "edit"
  | "hidden";

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | "read"
  | "hidden";

export type KeystoneAdminUIFieldMetaItemViewFieldMode =
  | "edit"
  | "read"
  | "hidden";

export type KeystoneAdminUISortDirection =
  | "ASC"
  | "DESC";


export declare namespace Lists {
  export type User = import('@keystone-6/core').ListConfig<Lists.User.TypeInfo, any>;
  namespace User {
    export type Item = import('.prisma/client').User;
    export type TypeInfo = {
      key: "User";
      fields: "id" | "name" | "email" | "attendances"
      item: Item;
      inputs: {
        where: UserWhereInput;
        uniqueWhere: UserWhereUniqueInput;
        create: UserCreateInput;
        update: UserUpdateInput;
        orderBy: UserOrderByInput;
      };
      all: __TypeInfo;
    };
  }
  export type Social = import('@keystone-6/core').ListConfig<Lists.Social.TypeInfo, any>;
  namespace Social {
    export type Item = import('.prisma/client').Social;
    export type TypeInfo = {
      key: "Social";
      fields: "id" | "title" | "date" | "attendances"
      item: Item;
      inputs: {
        where: SocialWhereInput;
        uniqueWhere: SocialWhereUniqueInput;
        create: SocialCreateInput;
        update: SocialUpdateInput;
        orderBy: SocialOrderByInput;
      };
      all: __TypeInfo;
    };
  }
  export type Attendance = import('@keystone-6/core').ListConfig<Lists.Attendance.TypeInfo, any>;
  namespace Attendance {
    export type Item = import('.prisma/client').Attendance;
    export type TypeInfo = {
      key: "Attendance";
      fields: "id" | "session" | "player" | "payment"
      item: Item;
      inputs: {
        where: AttendanceWhereInput;
        uniqueWhere: AttendanceWhereUniqueInput;
        create: AttendanceCreateInput;
        update: AttendanceUpdateInput;
        orderBy: AttendanceOrderByInput;
      };
      all: __TypeInfo;
    };
  }
  export type Payment = import('@keystone-6/core').ListConfig<Lists.Payment.TypeInfo, any>;
  namespace Payment {
    export type Item = import('.prisma/client').Payment;
    export type TypeInfo = {
      key: "Payment";
      fields: "id" | "amount" | "attendances"
      item: Item;
      inputs: {
        where: PaymentWhereInput;
        uniqueWhere: PaymentWhereUniqueInput;
        create: PaymentCreateInput;
        update: PaymentUpdateInput;
        orderBy: PaymentOrderByInput;
      };
      all: __TypeInfo;
    };
  }
}
export type Context = import('@keystone-6/core/types').KeystoneContext<TypeInfo>;

export type TypeInfo = {
  lists: {
  readonly User: Lists.User.TypeInfo;
  readonly Social: Lists.Social.TypeInfo;
  readonly Attendance: Lists.Attendance.TypeInfo;
  readonly Payment: Lists.Payment.TypeInfo;
  };
  prisma: import('.prisma/client').PrismaClient;
};

type __TypeInfo = TypeInfo;

export type Lists = {
  [Key in keyof TypeInfo['lists']]?: import('@keystone-6/core').ListConfig<TypeInfo['lists'][Key], any>
} & Record<string, import('@keystone-6/core').ListConfig<any, any>>;
