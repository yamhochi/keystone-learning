type Scalars = {
  readonly ID: string;
  readonly Boolean: boolean;
  readonly String: string;
  readonly Int: number;
  readonly Float: number;
  readonly JSON: import("@keystone-6/core/types").JSONValue;
  readonly Decimal: import("@keystone-6/core/types").Decimal | string;
};

export type UserWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type UserWhereInput = {
  readonly AND?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly OR?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly NOT?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly id?: IDFilter | null;
  readonly name?: StringFilter | null;
  readonly email?: StringFilter | null;
  readonly invoices?: InvoiceManyRelationFilter | null;
};

export type IDFilter = {
  readonly equals?: Scalars["ID"] | null;
  readonly in?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly notIn?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly lt?: Scalars["ID"] | null;
  readonly lte?: Scalars["ID"] | null;
  readonly gt?: Scalars["ID"] | null;
  readonly gte?: Scalars["ID"] | null;
  readonly not?: IDFilter | null;
};

export type StringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly mode?: QueryMode | null;
  readonly not?: NestedStringFilter | null;
};

export type QueryMode =
  | "default"
  | "insensitive";

export type NestedStringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type InvoiceManyRelationFilter = {
  readonly every?: InvoiceWhereInput | null;
  readonly some?: InvoiceWhereInput | null;
  readonly none?: InvoiceWhereInput | null;
};

export type UserOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly name?: OrderDirection | null;
  readonly email?: OrderDirection | null;
};

export type OrderDirection =
  | "asc"
  | "desc";

export type UserUpdateInput = {
  readonly name?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly invoices?: InvoiceRelateToManyForUpdateInput | null;
};

export type InvoiceRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<InvoiceWhereUniqueInput> | InvoiceWhereUniqueInput | null;
  readonly set?: ReadonlyArray<InvoiceWhereUniqueInput> | InvoiceWhereUniqueInput | null;
  readonly create?: ReadonlyArray<InvoiceCreateInput> | InvoiceCreateInput | null;
  readonly connect?: ReadonlyArray<InvoiceWhereUniqueInput> | InvoiceWhereUniqueInput | null;
};

export type UserUpdateArgs = {
  readonly where: UserWhereUniqueInput;
  readonly data: UserUpdateInput;
};

export type UserCreateInput = {
  readonly name?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly invoices?: InvoiceRelateToManyForCreateInput | null;
};

export type InvoiceRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<InvoiceCreateInput> | InvoiceCreateInput | null;
  readonly connect?: ReadonlyArray<InvoiceWhereUniqueInput> | InvoiceWhereUniqueInput | null;
};

export type InvoiceWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type InvoiceWhereInput = {
  readonly AND?: ReadonlyArray<InvoiceWhereInput> | InvoiceWhereInput | null;
  readonly OR?: ReadonlyArray<InvoiceWhereInput> | InvoiceWhereInput | null;
  readonly NOT?: ReadonlyArray<InvoiceWhereInput> | InvoiceWhereInput | null;
  readonly id?: IDFilter | null;
  readonly sessions?: SessionWhereInput | null;
  readonly users?: UserWhereInput | null;
  readonly paid?: BooleanFilter | null;
};

export type BooleanFilter = {
  readonly equals?: Scalars["Boolean"] | null;
  readonly not?: BooleanFilter | null;
};

export type InvoiceOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly paid?: OrderDirection | null;
};

export type InvoiceUpdateInput = {
  readonly sessions?: SessionRelateToOneForUpdateInput | null;
  readonly users?: UserRelateToOneForUpdateInput | null;
  readonly paid?: Scalars["Boolean"] | null;
};

export type SessionRelateToOneForUpdateInput = {
  readonly create?: SessionCreateInput | null;
  readonly connect?: SessionWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type UserRelateToOneForUpdateInput = {
  readonly create?: UserCreateInput | null;
  readonly connect?: UserWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type InvoiceUpdateArgs = {
  readonly where: InvoiceWhereUniqueInput;
  readonly data: InvoiceUpdateInput;
};

export type InvoiceCreateInput = {
  readonly sessions?: SessionRelateToOneForCreateInput | null;
  readonly users?: UserRelateToOneForCreateInput | null;
  readonly paid?: Scalars["Boolean"] | null;
};

export type SessionRelateToOneForCreateInput = {
  readonly create?: SessionCreateInput | null;
  readonly connect?: SessionWhereUniqueInput | null;
};

export type UserRelateToOneForCreateInput = {
  readonly create?: UserCreateInput | null;
  readonly connect?: UserWhereUniqueInput | null;
};

export type SessionWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type SessionWhereInput = {
  readonly AND?: ReadonlyArray<SessionWhereInput> | SessionWhereInput | null;
  readonly OR?: ReadonlyArray<SessionWhereInput> | SessionWhereInput | null;
  readonly NOT?: ReadonlyArray<SessionWhereInput> | SessionWhereInput | null;
  readonly id?: IDFilter | null;
  readonly title?: StringFilter | null;
  readonly date?: DateTimeNullableFilter | null;
  readonly invoices?: InvoiceManyRelationFilter | null;
};

export type DateTimeNullableFilter = {
  readonly equals?: any | null;
  readonly in?: ReadonlyArray<any> | any | null;
  readonly notIn?: ReadonlyArray<any> | any | null;
  readonly lt?: any | null;
  readonly lte?: any | null;
  readonly gt?: any | null;
  readonly gte?: any | null;
  readonly not?: DateTimeNullableFilter | null;
};

export type SessionOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly title?: OrderDirection | null;
  readonly date?: OrderDirection | null;
};

export type SessionUpdateInput = {
  readonly title?: Scalars["String"] | null;
  readonly date?: any | null;
  readonly invoices?: InvoiceRelateToManyForUpdateInput | null;
};

export type SessionUpdateArgs = {
  readonly where: SessionWhereUniqueInput;
  readonly data: SessionUpdateInput;
};

export type SessionCreateInput = {
  readonly title?: Scalars["String"] | null;
  readonly date?: any | null;
  readonly invoices?: InvoiceRelateToManyForCreateInput | null;
};

export type KeystoneAdminUIFieldMetaCreateViewFieldMode =
  | "edit"
  | "hidden";

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | "read"
  | "hidden";

export type KeystoneAdminUIFieldMetaItemViewFieldMode =
  | "edit"
  | "read"
  | "hidden";

export type KeystoneAdminUISortDirection =
  | "ASC"
  | "DESC";


export declare namespace Lists {
  export type User = import('@keystone-6/core').ListConfig<Lists.User.TypeInfo, any>;
  namespace User {
    export type Item = import('.prisma/client').User;
    export type TypeInfo = {
      key: "User";
      fields: "id" | "name" | "email" | "invoices"
      item: Item;
      inputs: {
        where: UserWhereInput;
        uniqueWhere: UserWhereUniqueInput;
        create: UserCreateInput;
        update: UserUpdateInput;
        orderBy: UserOrderByInput;
      };
      all: __TypeInfo;
    };
  }
  export type Invoice = import('@keystone-6/core').ListConfig<Lists.Invoice.TypeInfo, any>;
  namespace Invoice {
    export type Item = import('.prisma/client').Invoice;
    export type TypeInfo = {
      key: "Invoice";
      fields: "id" | "sessions" | "users" | "paid"
      item: Item;
      inputs: {
        where: InvoiceWhereInput;
        uniqueWhere: InvoiceWhereUniqueInput;
        create: InvoiceCreateInput;
        update: InvoiceUpdateInput;
        orderBy: InvoiceOrderByInput;
      };
      all: __TypeInfo;
    };
  }
  export type Session = import('@keystone-6/core').ListConfig<Lists.Session.TypeInfo, any>;
  namespace Session {
    export type Item = import('.prisma/client').Session;
    export type TypeInfo = {
      key: "Session";
      fields: "id" | "title" | "date" | "invoices" | "user_of_invoices"
      item: Item;
      inputs: {
        where: SessionWhereInput;
        uniqueWhere: SessionWhereUniqueInput;
        create: SessionCreateInput;
        update: SessionUpdateInput;
        orderBy: SessionOrderByInput;
      };
      all: __TypeInfo;
    };
  }
}
export type Context = import('@keystone-6/core/types').KeystoneContext<TypeInfo>;

export type TypeInfo = {
  lists: {
  readonly User: Lists.User.TypeInfo;
  readonly Invoice: Lists.Invoice.TypeInfo;
  readonly Session: Lists.Session.TypeInfo;
  };
  prisma: import('.prisma/client').PrismaClient;
};

type __TypeInfo = TypeInfo;

export type Lists = {
  [Key in keyof TypeInfo['lists']]?: import('@keystone-6/core').ListConfig<TypeInfo['lists'][Key], any>
} & Record<string, import('@keystone-6/core').ListConfig<any, any>>;
