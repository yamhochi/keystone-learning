type Scalars = {
  readonly ID: string;
  readonly Boolean: boolean;
  readonly String: string;
  readonly Int: number;
  readonly Float: number;
  readonly JSON: import("@keystone-6/core/types").JSONValue;
  readonly Decimal: import("@keystone-6/core/types").Decimal | string;
};

export type UserWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
  readonly email?: Scalars["String"] | null;
};

export type UserWhereInput = {
  readonly AND?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly OR?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly NOT?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly id?: IDFilter | null;
  readonly name?: StringFilter | null;
  readonly email?: StringFilter | null;
  readonly sessions?: SessionManyRelationFilter | null;
};

export type IDFilter = {
  readonly equals?: Scalars["ID"] | null;
  readonly in?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly notIn?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly lt?: Scalars["ID"] | null;
  readonly lte?: Scalars["ID"] | null;
  readonly gt?: Scalars["ID"] | null;
  readonly gte?: Scalars["ID"] | null;
  readonly not?: IDFilter | null;
};

export type StringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly mode?: QueryMode | null;
  readonly not?: NestedStringFilter | null;
};

export type QueryMode =
  | "default"
  | "insensitive";

export type NestedStringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type SessionManyRelationFilter = {
  readonly every?: SessionWhereInput | null;
  readonly some?: SessionWhereInput | null;
  readonly none?: SessionWhereInput | null;
};

export type UserOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly name?: OrderDirection | null;
  readonly email?: OrderDirection | null;
};

export type OrderDirection =
  | "asc"
  | "desc";

export type UserUpdateInput = {
  readonly name?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly sessions?: SessionRelateToManyForUpdateInput | null;
};

export type SessionRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<SessionWhereUniqueInput> | SessionWhereUniqueInput | null;
  readonly set?: ReadonlyArray<SessionWhereUniqueInput> | SessionWhereUniqueInput | null;
  readonly create?: ReadonlyArray<SessionCreateInput> | SessionCreateInput | null;
  readonly connect?: ReadonlyArray<SessionWhereUniqueInput> | SessionWhereUniqueInput | null;
};

export type UserUpdateArgs = {
  readonly where: UserWhereUniqueInput;
  readonly data: UserUpdateInput;
};

export type UserCreateInput = {
  readonly name?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly sessions?: SessionRelateToManyForCreateInput | null;
};

export type SessionRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<SessionCreateInput> | SessionCreateInput | null;
  readonly connect?: ReadonlyArray<SessionWhereUniqueInput> | SessionWhereUniqueInput | null;
};

export type SessionWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type SessionWhereInput = {
  readonly AND?: ReadonlyArray<SessionWhereInput> | SessionWhereInput | null;
  readonly OR?: ReadonlyArray<SessionWhereInput> | SessionWhereInput | null;
  readonly NOT?: ReadonlyArray<SessionWhereInput> | SessionWhereInput | null;
  readonly id?: IDFilter | null;
  readonly title?: StringFilter | null;
  readonly date?: DateTimeNullableFilter | null;
  readonly users?: UserManyRelationFilter | null;
};

export type DateTimeNullableFilter = {
  readonly equals?: any | null;
  readonly in?: ReadonlyArray<any> | any | null;
  readonly notIn?: ReadonlyArray<any> | any | null;
  readonly lt?: any | null;
  readonly lte?: any | null;
  readonly gt?: any | null;
  readonly gte?: any | null;
  readonly not?: DateTimeNullableFilter | null;
};

export type UserManyRelationFilter = {
  readonly every?: UserWhereInput | null;
  readonly some?: UserWhereInput | null;
  readonly none?: UserWhereInput | null;
};

export type SessionOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly title?: OrderDirection | null;
  readonly date?: OrderDirection | null;
};

export type SessionUpdateInput = {
  readonly title?: Scalars["String"] | null;
  readonly date?: any | null;
  readonly users?: UserRelateToManyForUpdateInput | null;
};

export type UserRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null;
  readonly set?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null;
  readonly create?: ReadonlyArray<UserCreateInput> | UserCreateInput | null;
  readonly connect?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null;
};

export type SessionUpdateArgs = {
  readonly where: SessionWhereUniqueInput;
  readonly data: SessionUpdateInput;
};

export type SessionCreateInput = {
  readonly title?: Scalars["String"] | null;
  readonly date?: any | null;
  readonly users?: UserRelateToManyForCreateInput | null;
};

export type UserRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<UserCreateInput> | UserCreateInput | null;
  readonly connect?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null;
};

export type KeystoneAdminUIFieldMetaCreateViewFieldMode =
  | "edit"
  | "hidden";

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | "read"
  | "hidden";

export type KeystoneAdminUIFieldMetaItemViewFieldMode =
  | "edit"
  | "read"
  | "hidden";

export type KeystoneAdminUISortDirection =
  | "ASC"
  | "DESC";


export declare namespace Lists {
  export type User = import('@keystone-6/core').ListConfig<Lists.User.TypeInfo, any>;
  namespace User {
    export type Item = import('.prisma/client').User;
    export type TypeInfo = {
      key: "User";
      fields: "id" | "name" | "email" | "sessions"
      item: Item;
      inputs: {
        where: UserWhereInput;
        uniqueWhere: UserWhereUniqueInput;
        create: UserCreateInput;
        update: UserUpdateInput;
        orderBy: UserOrderByInput;
      };
      all: __TypeInfo;
    };
  }
  export type Session = import('@keystone-6/core').ListConfig<Lists.Session.TypeInfo, any>;
  namespace Session {
    export type Item = import('.prisma/client').Session;
    export type TypeInfo = {
      key: "Session";
      fields: "id" | "title" | "date" | "users"
      item: Item;
      inputs: {
        where: SessionWhereInput;
        uniqueWhere: SessionWhereUniqueInput;
        create: SessionCreateInput;
        update: SessionUpdateInput;
        orderBy: SessionOrderByInput;
      };
      all: __TypeInfo;
    };
  }
}
export type Context = import('@keystone-6/core/types').KeystoneContext<TypeInfo>;

export type TypeInfo = {
  lists: {
  readonly User: Lists.User.TypeInfo;
  readonly Session: Lists.Session.TypeInfo;
  };
  prisma: import('.prisma/client').PrismaClient;
};

type __TypeInfo = TypeInfo;

export type Lists = {
  [Key in keyof TypeInfo['lists']]?: import('@keystone-6/core').ListConfig<TypeInfo['lists'][Key], any>
} & Record<string, import('@keystone-6/core').ListConfig<any, any>>;
