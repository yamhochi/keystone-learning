var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  setupCockroach: () => setupCockroach,
  tearDownCockroach: () => tearDownCockroach
});
var import_sdk = __toModule(require("@prisma/sdk"));
var import_fs = __toModule(require("fs"));
var import_path = __toModule(require("path"));
var import_pg = __toModule(require("pg"));
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
async function setupCockroach(options) {
  const { connectionString } = options;
  const { dirname } = options;
  const credentials = (0, import_sdk.uriToCredentials)(connectionString);
  const dbDefault = new import_pg.Client({
    connectionString: connectionString.replace(credentials.database, "cockroachdb")
  });
  await dbDefault.connect();
  await dbDefault.query(`DROP DATABASE IF EXISTS "${credentials.database}-shadowdb";`);
  await dbDefault.query(`CREATE DATABASE "${credentials.database}-shadowdb";`);
  await dbDefault.query(`DROP DATABASE IF EXISTS "${credentials.database}";`);
  await dbDefault.query(`CREATE DATABASE "${credentials.database}";`);
  await dbDefault.end();
  if (dirname !== "") {
    const db = new import_pg.Client({
      connectionString
    });
    await db.connect();
    await db.query(import_fs.default.readFileSync(import_path.default.join(dirname, "setup.sql"), "utf-8"));
    await db.end();
  }
}
__name(setupCockroach, "setupCockroach");
__name2(setupCockroach, "setupCockroach");
async function tearDownCockroach(options) {
  const { connectionString } = options;
  const credentials = (0, import_sdk.uriToCredentials)(connectionString);
  const credentialsClone = { ...credentials };
  credentialsClone.database = "cockroachdb";
  credentialsClone.schema = "";
  const connectionStringCopy = (0, import_sdk.credentialsToUri)(credentialsClone);
  const db = new import_pg.Client({
    connectionString: connectionStringCopy
  });
  await db.connect();
  await db.query(`
    DROP DATABASE IF EXISTS "${credentials.database}";
  `);
  await db.end();
}
__name(tearDownCockroach, "tearDownCockroach");
__name2(tearDownCockroach, "tearDownCockroach");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  setupCockroach,
  tearDownCockroach
});
