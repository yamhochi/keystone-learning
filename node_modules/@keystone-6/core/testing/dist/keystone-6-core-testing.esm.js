import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import path__default from 'path';
import crypto from 'crypto';
import fs from 'fs';
import supertest from 'supertest';
import memoizeOne from 'memoize-one';
import { g as getCommittedArtifacts, w as writeCommittedArtifacts, a as generateNodeModulesArtifacts, r as requirePrismaClient } from '../../dist/artifacts-9e458843.esm.js';
import { p as pushPrismaSchemaToDatabase } from '../../dist/migrations-26e4c0d0.esm.js';
import { i as initConfig, c as createSystem } from '../../dist/initConfig-263d65de.esm.js';
import { c as createExpressServer } from '../../dist/createAdminUIMiddleware-c1df7bba.esm.js';
import 'apollo-server-micro';
import 'apollo-server-express';
import 'apollo-server-core';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'cookie';
import '@hapi/iron';
import 'uid-safe';
import 'module';
import 'graphql';
import 'fs-extra';
import '@prisma/sdk';
import 'prettier';
import '../../dist/utils-b64dcc3e.esm.js';
import 'prompts';
import '@babel/runtime/helpers/defineProperty';
import '../../dist/core-c6bc4160.esm.js';
import '../../dist/mysql-a7009855.esm.js';
import '../../dist/graphql-ts-schema-ecd3b4c2.esm.js';
import '@graphql-ts/schema';
import 'graphql-type-json';
import 'graphql-upload/public/GraphQLUpload.js';
import 'decimal.js';
import '@graphql-ts/schema/api-without-context';
import '@graphql-ts/extend';
import '@graphql-ts/schema/api-with-context';
import '@graphql-tools/schema';
import '../../dist/types-for-lists-ffad1dcf.esm.js';
import 'graphql/execution/values';
import '../../dist/graphql-errors-68845105.esm.js';
import 'apollo-server-errors';
import 'pluralize';
import '@prisma/migrate';
import 'chalk';
import '@sindresorhus/slugify';
import 'p-limit';
import 'util';
import 'resolve';
import '@nodelib/fs.walk';
import '@emotion/hash';
import '../../dist/admin-meta-graphql-9585711c.esm.js';
import '@apollo/client';
import '@babel/runtime/helpers/classPrivateFieldInitSpec';
import '@babel/runtime/helpers/classPrivateFieldGet';
import '@babel/runtime/helpers/classPrivateFieldSet';
import 'uuid';
import 'image-type';
import 'image-size';
import 'stream';
import '@aws-sdk/s3-request-presigner';
import '@aws-sdk/client-s3';
import '@aws-sdk/lib-storage';
import 'filenamify';
import 'cuid';
import '../../dist/package-path-5ec371a3.esm.js';
import 'http';
import 'cors';
import 'express';
import 'graphql-upload';
import '../../session/dist/keystone-6-core-session.esm.js';
import '../../dist/createApolloServer-23a6674d.esm.js';
import 'url';

const _hashPrismaSchema = memoizeOne(prismaSchema => crypto.createHash('md5').update(prismaSchema).digest('hex'));

const _alreadyGeneratedProjects = new Set();

async function setupTestEnv(_ref) {
  let {
    config: _config
  } = _ref;
  // Force the UI to always be disabled.
  const config = initConfig(_objectSpread(_objectSpread({}, _config), {}, {
    ui: _objectSpread(_objectSpread({}, _config.ui), {}, {
      isDisabled: true
    })
  }));
  const {
    graphQLSchema,
    getKeystone
  } = createSystem(config);
  const artifacts = await getCommittedArtifacts(graphQLSchema, config);

  const hash = _hashPrismaSchema(artifacts.prisma);

  const artifactPath = path__default.resolve('.keystone', 'tests', hash);

  if (!_alreadyGeneratedProjects.has(hash)) {
    _alreadyGeneratedProjects.add(hash);

    fs.mkdirSync(artifactPath, {
      recursive: true
    });
    await writeCommittedArtifacts(artifacts, artifactPath);
    await generateNodeModulesArtifacts(graphQLSchema, config, artifactPath);
  }

  await pushPrismaSchemaToDatabase(config.db.url, config.db.shadowDatabaseUrl, artifacts.prisma, path__default.join(artifactPath, 'schema.prisma'), true // shouldDropDatabase
  );
  const {
    connect,
    disconnect,
    createContext
  } = getKeystone(requirePrismaClient(artifactPath));
  const {
    expressServer: app,
    apolloServer,
    httpServer: server
  } = await createExpressServer(config, graphQLSchema, createContext);

  const graphQLRequest = _ref2 => {
    var _config$graphql;

    let {
      query,
      variables = undefined,
      operationName
    } = _ref2;
    return supertest(app).post(((_config$graphql = config.graphql) === null || _config$graphql === void 0 ? void 0 : _config$graphql.path) || '/api/graphql').send({
      query,
      variables,
      operationName
    }).set('Accept', 'application/json');
  };

  return {
    connect,
    disconnect: async () => {
      await Promise.all([disconnect(), apolloServer.stop()]);
    },
    testArgs: {
      context: createContext(),
      graphQLRequest,
      app,
      server
    }
  };
}
function setupTestRunner(_ref3) {
  let {
    config
  } = _ref3;
  return testFn => async () => {
    // Reset the database to be empty for every test.
    const {
      connect,
      disconnect,
      testArgs
    } = await setupTestEnv({
      config
    });
    await connect();

    try {
      return await testFn(testArgs);
    } finally {
      await disconnect();
    }
  };
}

export { setupTestEnv, setupTestRunner };
